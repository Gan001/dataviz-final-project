{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import math\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import LSTM\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>air_store_id</th>\n",
       "      <th>air_genre_name</th>\n",
       "      <th>air_area_name</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>visit_datetime</th>\n",
       "      <th>reserve_datetime</th>\n",
       "      <th>reserve_visitors</th>\n",
       "      <th>visit_date</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>air_0f0cdeee6c9bf3d7</td>\n",
       "      <td>Italian/French</td>\n",
       "      <td>Hyōgo-ken Kōbe-shi Kumoidōri</td>\n",
       "      <td>34.695124</td>\n",
       "      <td>135.197852</td>\n",
       "      <td>2016-07-01 18:00:00</td>\n",
       "      <td>2016-06-16 20:00:00</td>\n",
       "      <td>3</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>air_0f0cdeee6c9bf3d7</td>\n",
       "      <td>Italian/French</td>\n",
       "      <td>Hyōgo-ken Kōbe-shi Kumoidōri</td>\n",
       "      <td>34.695124</td>\n",
       "      <td>135.197852</td>\n",
       "      <td>2016-07-04 17:00:00</td>\n",
       "      <td>2016-07-04 17:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2016-07-04</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>air_0f0cdeee6c9bf3d7</td>\n",
       "      <td>Italian/French</td>\n",
       "      <td>Hyōgo-ken Kōbe-shi Kumoidōri</td>\n",
       "      <td>34.695124</td>\n",
       "      <td>135.197852</td>\n",
       "      <td>2016-07-04 20:00:00</td>\n",
       "      <td>2016-07-01 20:00:00</td>\n",
       "      <td>8</td>\n",
       "      <td>2016-07-04</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>air_0f0cdeee6c9bf3d7</td>\n",
       "      <td>Italian/French</td>\n",
       "      <td>Hyōgo-ken Kōbe-shi Kumoidōri</td>\n",
       "      <td>34.695124</td>\n",
       "      <td>135.197852</td>\n",
       "      <td>2016-07-06 19:00:00</td>\n",
       "      <td>2016-07-05 20:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2016-07-06</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>air_0f0cdeee6c9bf3d7</td>\n",
       "      <td>Italian/French</td>\n",
       "      <td>Hyōgo-ken Kōbe-shi Kumoidōri</td>\n",
       "      <td>34.695124</td>\n",
       "      <td>135.197852</td>\n",
       "      <td>2016-07-06 19:00:00</td>\n",
       "      <td>2016-07-04 14:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>2016-07-06</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0          air_store_id  air_genre_name  \\\n",
       "0           0  air_0f0cdeee6c9bf3d7  Italian/French   \n",
       "1           1  air_0f0cdeee6c9bf3d7  Italian/French   \n",
       "2           2  air_0f0cdeee6c9bf3d7  Italian/French   \n",
       "3           3  air_0f0cdeee6c9bf3d7  Italian/French   \n",
       "4           4  air_0f0cdeee6c9bf3d7  Italian/French   \n",
       "\n",
       "                  air_area_name   latitude   longitude       visit_datetime  \\\n",
       "0  Hyōgo-ken Kōbe-shi Kumoidōri  34.695124  135.197852  2016-07-01 18:00:00   \n",
       "1  Hyōgo-ken Kōbe-shi Kumoidōri  34.695124  135.197852  2016-07-04 17:00:00   \n",
       "2  Hyōgo-ken Kōbe-shi Kumoidōri  34.695124  135.197852  2016-07-04 20:00:00   \n",
       "3  Hyōgo-ken Kōbe-shi Kumoidōri  34.695124  135.197852  2016-07-06 19:00:00   \n",
       "4  Hyōgo-ken Kōbe-shi Kumoidōri  34.695124  135.197852  2016-07-06 19:00:00   \n",
       "\n",
       "      reserve_datetime  reserve_visitors  visit_date  visitors  \n",
       "0  2016-06-16 20:00:00                 3  2016-07-01        18  \n",
       "1  2016-07-04 17:00:00                 2  2016-07-04        16  \n",
       "2  2016-07-01 20:00:00                 8  2016-07-04        16  \n",
       "3  2016-07-05 20:00:00                 2  2016-07-06        16  \n",
       "4  2016-07-04 14:00:00                 5  2016-07-06        16  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"air_jordan.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reserve_visitors</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   reserve_visitors  visitors\n",
       "0                 3        18\n",
       "1                 2        16\n",
       "2                 8        16\n",
       "3                 2        16\n",
       "4                 5        16"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df['reserve_visitors'].values\n",
    "y = df['visitors'].values\n",
    "dataset = df[['reserve_visitors', 'visitors']]\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = dataset.values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = dataset.astype('float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plt.scatter(X, y)\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "dataset = scaler.fit_transform(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61026 26155\n"
     ]
    }
   ],
   "source": [
    "# split into train and test sets\n",
    "train_size = int(len(dataset) * 0.7)\n",
    "test_size = len(dataset) - train_size\n",
    "train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\n",
    "print(len(train), len(test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dataset(dataset, look_back=1):\n",
    "\tdataX, dataY = [], []\n",
    "\tfor i in range(len(dataset)-look_back-1):\n",
    "\t\ta = dataset[i:(i+look_back), 0]\n",
    "\t\tdataX.append(a)\n",
    "\t\tdataY.append(dataset[i + look_back, 0])\n",
    "\treturn numpy.array(dataX), numpy.array(dataY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = create_dataset(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.02020202],\n",
       "       [0.01010101],\n",
       "       [0.07070707],\n",
       "       ...,\n",
       "       [0.12121212],\n",
       "       [0.23232324],\n",
       "       [0.16161616]], dtype=float32)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reshape into X=t and Y=t+1\n",
    "look_back = 1\n",
    "trainX, trainY = create_dataset(train, look_back)\n",
    "testX, testY = create_dataset(test, look_back)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reshape input to be [samples, time steps, features]\n",
    "trainX = numpy.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\n",
    "testX = numpy.reshape(testX, (testX.shape[0], 1, testX.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      " - 63s - loss: 0.0024\n",
      "Epoch 2/5\n",
      " - 63s - loss: 0.0024\n",
      "Epoch 3/5\n",
      " - 64s - loss: 0.0024\n",
      "Epoch 4/5\n",
      " - 63s - loss: 0.0024\n",
      "Epoch 5/5\n",
      " - 63s - loss: 0.0024\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1df274417b8>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create and fit the LSTM network\n",
    "model = Sequential()\n",
    "model.add(LSTM(4, input_shape=(1, look_back)))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mean_squared_error', optimizer='adam')\n",
    "model.fit(trainX, trainY, epochs=5, batch_size=1, verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The network has a visible layer with 1 input, a hidden layer with 4 LSTM blocks or neurons, and an output layer that makes a single value prediction. The default sigmoid activation function is used for the LSTM blocks. The network is trained for 100 epochs and a batch size of 1 is used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score: RMSE 0.04881279704788712\n",
      "Test Score:  R2 0.04685605462057585\n"
     ]
    }
   ],
   "source": [
    "# make predictions\n",
    "trainPredict = model.predict(trainX)\n",
    "testPredict = model.predict(testX)\n",
    "# invert predictions\n",
    "# trainPredict = scaler.inverse_transform(trainPredict)\n",
    "# trainY = scaler.inverse_transform([trainY])\n",
    "# testPredict = scaler.inverse_transform(testPredict)\n",
    "# testY = scaler.inverse_transform([testY])\n",
    "# calculate root mean squared error\n",
    "# trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "# print('Train Score: %.2f RMSE' % (trainScore))\n",
    "testScore = math.sqrt(mean_squared_error(trainY, trainPredict))\n",
    "testR2 = r2_score(testY, testPredict)\n",
    "print('Test Score: RMSE' ,(testScore))\n",
    "print('Test Score:  R2' , (testR2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(trainX,trainPredict)\n",
    "plt.scatter(testX, testPredict)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1df2a867588>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
